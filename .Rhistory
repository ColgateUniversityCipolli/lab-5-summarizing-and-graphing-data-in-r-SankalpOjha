"Out Of Range",
"Outlying"),
"Within Range")
)|>
select(-allen.data.feature)
return(summarize.data)
}
#remove all columns which are not numeric
col.classes.type <- sapply(other.data, class)
cols.numeric.names <- names(other.data[which(col.classes.type == "numeric")])
list.descriptions <- c()
for(col in 1:length(cols.numeric.names)){
#col = 196
data <- checker(cols.numeric.names[col], allen.data, other.data)
list.descriptions <- cbind(list.descriptions, data[[8]])
}
names <- tibble(artists = c("All Get Out",
"Manchster Orchestra",
"The Front Bottoms"))
all.data <- bind_cols(names, list.descriptions)
view(all.data)
class(all.data) = "data.frame"
count.in.range = rowSums(all.data == "Within Range")
count.outlying = rowSums(all.data == "Outlying")
count.out.range = rowSums(all.data == "Out Of Range")
summary.data <- all.data %>%
mutate(count.in.range = count.in.range,
count.outlying = count.outlying,
count.out.range = count.out.range) |>
mutate(points = count.in.range + 0.5 * (count.outlying))
view(summary.data)
#Column plot for feature in range
ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "plot 1")
#Column plot for features that are outlying
ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "plot 2")
#Column plot for feature out of range
ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "plot 3")
ggplot(aes(x = artists, y = count), data = summary.data) +
geom_col(width = .75, fill = "lightblue") +
geom_hline(yintercept = 0, color = "black") +
theme_bw() +
labs(x = "Artists",
y = "Count",
title = "Comparison of Categories Across Artists") +
facet_wrap(~category, scales = "free_y")
plot1 <- ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "plot 1")
#Column plot for features that are outlying
plot2 <- ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "plot 2")
#Column plot for feature out of range
plot3 <- ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "plot 3")
grid.arrange(plot1, plot2, plot3, ncol = 3)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
plot1 <- ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "plot 1")
#Column plot for features that are outlying
plot2 <- ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "plot 2")
#Column plot for feature out of range
plot3 <- ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "plot 3")
grid.arrange(plot1, plot2, plot3, ncol = 3)
plot4 <- ggplot(aes(x = artists,
y = points),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Points",
title = "plot 4")
ggplot(aes(x = artists,
y = points),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Points",
title = "plot 4")
library("tidyverse")
library("ggplot2")
library("tidyverse")
library("jsonlite")
library("stringr")
plot1 <- ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "plot 1")
#Column plot for features that are outlying
plot2 <- ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "plot 2")
#Column plot for feature out of range
plot3 <- ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "plot 3")
plot4 <- ggplot(aes(x = artists,
y = points),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Points",
title = "plot 4")
plot1 + plot2 + plot3 + plot4
?patchwork
install.packages("patchwork")
?patchwork
library(patchwork)
?patchwork
library("tidyverse")
library("jsonlite")
library("stringr")
library(ggplot2)
plot1 <- ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "plot 1")
#Column plot for features that are outlying
plot2 <- ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "plot 2")
#Column plot for feature out of range
plot3 <- ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "plot 3")
plot4 <- ggplot(aes(x = artists,
y = points),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Points",
title = "plot 4")
plot1 + plot2 + plot3 + plot4
table = xtable(summary.data)
install.packages("xtable")
library("xtable")
library("tidyverse")
library("jsonlite")
library("stringr")
library(ggplot2)
library("xtable")
table = xtable(summary.data)
table
table.info <- summary.data |>
select("artists",
"count.in.range",
"count.outlying",
"count.out.range",
"points")
table = xtable(table.info)
table
library("tidyverse")
library("jsonlite")
library("stringr")
library(ggplot2)
library("xtable")
#get Allentown data
allen.data <- read_csv("data/essentia.data.allentown.csv")
#get other data
other.data <- read_csv("data/essentia.data.csv")
#function to extract data about how each band compares to Allentown
checker <- function(feature = feature,
allen.data = allen.data,
other.data = other.data){
summarize.data <- other.data |>
mutate(feature = as.numeric(get(feature)))|>
group_by(artist) |>
summarize(
minimum = min(feature, na.rm = TRUE),
maximum = max(feature, na.rm = TRUE),
low.bound = quantile(feature, 0.25, na.rm = TRUE) - 1.5 * IQR(feature, na.rm = TRUE),
upper.bound = quantile(feature, 0.75, na.rm = TRUE) + 1.5 * IQR(feature, na.rm = TRUE)
)|>
mutate(
allen.data.feature = allen.data[[feature]],
out.of.range = ifelse((minimum > allen.data.feature | maximum < allen.data.feature),
TRUE,
FALSE),
unusual = ifelse((low.bound > allen.data.feature | upper.bound < allen.data.feature),
TRUE,
FALSE)
)|>
mutate(
description = ifelse((unusual == TRUE),
ifelse((out.of.range == TRUE),
"Out Of Range",
"Outlying"),
"Within Range")
)|>
select(-allen.data.feature)
return(summarize.data)
}
#remove all columns which are not numeric
col.classes.type <- sapply(other.data, class)
cols.numeric.names <- names(other.data[which(col.classes.type == "numeric")])
list.descriptions <- c()
for(col in 1:length(cols.numeric.names)){
#col = 196
data <- checker(cols.numeric.names[col], allen.data, other.data)
list.descriptions <- cbind(list.descriptions, data[[8]])
}
names <- tibble(artists = c("All Get Out",
"Manchster Orchestra",
"The Front Bottoms"))
all.data <- bind_cols(names, list.descriptions)
view(all.data)
class(all.data) = "data.frame"
count.in.range = rowSums(all.data == "Within Range")
count.outlying = rowSums(all.data == "Outlying")
count.out.range = rowSums(all.data == "Out Of Range")
summary.data <- all.data %>%
mutate(count.in.range = count.in.range,
count.outlying = count.outlying,
count.out.range = count.out.range) |>
mutate(points = count.in.range + 0.5 * (count.outlying))
view(summary.data)
#Column plot for feature in range
plot1 <- ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "Artists Within Categories")
#Column plot for features that are outlying
plot2 <- ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "plot 2")
#Column plot for feature out of range
plot3 <- ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "plot 3")
plot4 <- ggplot(aes(x = artists,
y = points),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Points",
title = "plot 4")
plot1 + plot2 + plot3 + plot4
table.info <- summary.data |>
select("artists",
"count.in.range",
"count.outlying",
"count.out.range",
"points")
table = xtable(table.info)
library("tidyverse")
library("jsonlite")
library("stringr")
library(ggplot2)
library("xtable")
#get Allentown data
allen.data <- read_csv("data/essentia.data.allentown.csv")
#get other data
other.data <- read_csv("data/essentia.data.csv")
#function to extract data about how each band compares to Allentown
checker <- function(feature = feature,
allen.data = allen.data,
other.data = other.data){
summarize.data <- other.data |>
mutate(feature = as.numeric(get(feature)))|>
group_by(artist) |>
summarize(
minimum = min(feature, na.rm = TRUE),
maximum = max(feature, na.rm = TRUE),
low.bound = quantile(feature, 0.25, na.rm = TRUE) - 1.5 * IQR(feature, na.rm = TRUE),
upper.bound = quantile(feature, 0.75, na.rm = TRUE) + 1.5 * IQR(feature, na.rm = TRUE)
)|>
mutate(
allen.data.feature = allen.data[[feature]],
out.of.range = ifelse((minimum > allen.data.feature | maximum < allen.data.feature),
TRUE,
FALSE),
unusual = ifelse((low.bound > allen.data.feature | upper.bound < allen.data.feature),
TRUE,
FALSE)
)|>
mutate(
description = ifelse((unusual == TRUE),
ifelse((out.of.range == TRUE),
"Out Of Range",
"Outlying"),
"Within Range")
)|>
select(-allen.data.feature)
return(summarize.data)
}
#remove all columns which are not numeric
col.classes.type <- sapply(other.data, class)
cols.numeric.names <- names(other.data[which(col.classes.type == "numeric")])
list.descriptions <- c()
for(col in 1:length(cols.numeric.names)){
#col = 196
data <- checker(cols.numeric.names[col], allen.data, other.data)
list.descriptions <- cbind(list.descriptions, data[[8]])
}
names <- tibble(artists = c("All Get Out",
"Manchster Orchestra",
"The Front Bottoms"))
all.data <- bind_cols(names, list.descriptions)
view(all.data)
class(all.data) = "data.frame"
count.in.range = rowSums(all.data == "Within Range")
count.outlying = rowSums(all.data == "Outlying")
count.out.range = rowSums(all.data == "Out Of Range")
summary.data <- all.data %>%
mutate(count.in.range = count.in.range,
count.outlying = count.outlying,
count.out.range = count.out.range) |>
mutate(points = count.in.range + 0.5 * (count.outlying))
view(summary.data)
#Column plot for feature in range
plot1 <- ggplot(aes(x = artists,
y = count.in.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Within Range Categories",
title = "Artists Within Range Of Categories")
#Column plot for features that are outlying
plot2 <- ggplot(aes(x = artists,
y = count.outlying),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw() +
labs(x = "Artists",
y = "Number Of Outlying Categories",
title = "Artists Outlying Of Categories")
#Column plot for feature out of range
plot3 <- ggplot(aes(x = artists,
y = count.out.range),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Number Of Out Of Range Categories",
title = "Artists Out Of Range Of Categories")
plot4 <- ggplot(aes(x = artists,
y = points),
data = summary.data) +
geom_col(width = .75) +
geom_hline(yintercept = 0, color = "black") +
geom_bar(stat="identity",fill="lightblue")+
theme_bw()  +
labs(x = "Artists",
y = "Points",
title = "Total Points Accumalated")
plot1 + plot2 + plot3 + plot4
table.info <- summary.data |>
select("artists",
"count.in.range",
"count.outlying",
"count.out.range",
"points")
table = xtable(table.info)
table
